#!/bin/bash

NETWORK_MAGIC=2
BOROS_RPC="0.0.0.0:50052"
CHAINED_QUEUE=$1

if [ ! -e "./cardano-cli" ]; then
  echo "make sure to have cardano-cli in the tx-gen path"
  exit 1
fi

if [ ! -e "$CARDANO_NODE_SOCKET_PATH" ]; then
  echo "set the env CARDANO_NODE_SOCKET_PATH"
  exit 1
fi

if [ ! -f "payment.skey" ]; then
  echo "creating payment keys"
  ./cardano-cli address key-gen --verification-key-file payment.vkey --signing-key-file payment.skey
fi

if [ ! -f "payment.addr" ]; then
  echo "creating payment addr"
  ./cardano-cli address build --payment-verification-key-file payment.vkey --out-file payment.addr --testnet-magic $NETWORK_MAGIC
fi

ADDRESS=$(< payment.addr)

echo "address: $ADDRESS"

UTXO=$(./cardano-cli query utxo --address $ADDRESS --testnet-magic $NETWORK_MAGIC --output-json | jq -r 'to_entries | .[0].key')

if [ -z "$UTXO" ] || [ "$UTXO" == "null" ]; then
    echo "no balance yet. Request fund in the faucet"
    exit 1
fi

echo "utxo: $UTXO"

./cardano-cli latest transaction build --tx-in $UTXO --change-address $ADDRESS --testnet-magic $NETWORK_MAGIC --out-file tx.raw

./cardano-cli latest transaction sign --tx-body-file tx.raw --signing-key-file payment.skey --out-file tx.signed

CBOR=$(cat ./tx.signed | jq -r '.cborHex')

echo "signed tx cbor: $CBOR"

if [ -z "$CHAINED_QUEUE" ]; then
    grpcurl -plaintext -d "{\"tx\": [{\"raw\": \"$(echo $CBOR | xxd -r -p | base64 | tr -d '\n')\"}]}" $BOROS_RPC boros.v1.submit.SubmitService.SubmitTx
else
    echo "locking the state"
    LOCK_TOKEN=$(grpcurl -plaintext -d "{\"queue\":  \"$CHAINED_QUEUE\" }" $BOROS_RPC boros.v1.submit.SubmitService.LockState | jq -r '.lockToken')

    echo "submitting transaction"
    grpcurl -plaintext -d "{\"tx\": [{\"raw\": \"$(echo $CBOR | xxd -r -p | base64 | tr -d '\n')\", \"queue\": \"$CHAINED_QUEUE\", \"lock_token\": \"$LOCK_TOKEN\"}]}" $BOROS_RPC boros.v1.submit.SubmitService.SubmitTx
fi
